-- INSTRUCCIONES
-- REEMPLAZAR EL TEXTO _OW_BASE_ CON EL NOMBRE DEL PROYECTO

-- ********************  NOTA IMPORTANTE!!!!  ***********************
-- *                                                                *
-- *  POR FAVOR ENVIAR LOS LOGS DE EJECUCION DE ESTE SCRIPT (.LST)  *
-- *  PARA EFECTOS DE VERIFICACION DEL CAMBIO                       *
-- *                                                                *
-- *                                                                *
-- *                     OWNK S.A.S.                                *
-- *                                                                *
-- *                                                                *
-- ******************************************************************

-- SETUP
\i SETUP.sql
-- Dumped from database version 11.1
-- Dumped by pg_dump version 11.1

SET statement_timeout = 0;
SET
SET lock_timeout = 0;
SET
SET idle_in_transaction_session_timeout = 0;
SET
SET client_encoding = 'UTF8';
SET
SET standard_conforming_strings = on;
SET
SELECT pg_catalog.set_config('search_path', '', false);
 set_config 
------------
 
(1 fila)

SET check_function_bodies = false;
SET
SET client_min_messages = warning;
SET
SET row_security = off;
SET

-- @INSTALL_SCHEMA.sql
\i INSTALL_SCHEMAS.sql
-- 00_SCHEMA...
\i 00_SCHEMA/00_INSTALADOR.sql
-- ***************************************************
-- **          PROYECTO WEB BASE                    **
-- **          REV:26\01\2019                       ** 
-- ***************************************************

-- CREANDO USER
\i 00_SCHEMA/00_UNISTALL.sql
-- ***************************************************
-- **          PROYECTO WEB BASE                    **
-- **          REV:26\01\2019                       ** 
-- ***************************************************

-- USUARIO DEL APLICATIVO 
-- User: ownk_us

	
DROP DATABASE IF exists  "OWNK_BD";
DROP DATABASE
DROP USER IF exists ownk_us;
DROP ROLE

-- CREANDO USER
\i 00_SCHEMA/01_USER.sql
-- ***************************************************
-- **          PROYECTO WEB BASE                    **
-- **          REV:26\01\2019                       ** 
-- ***************************************************

-- USUARIO DEL APLICATIVO 
-- User: ownk_us

CREATE USER ownk_us WITH
  LOGIN
  ENCRYPTED PASSWORD 'ownk_us'
  NOSUPERUSER
  INHERIT
  NOCREATEDB
  NOCREATEROLE
  NOREPLICATION;
CREATE ROLE


-- CREANDO SCHEMAS
\i 00_SCHEMA/02_SCHEMAS.sql
-- ***************************************************
-- **          PROYECTO WEB BASE                    **
-- **          REV:26\01\2019                       ** 
-- ***************************************************

--
-- PostgreSQL database dump
--

-- Database: JUEGOHACKER_BD

CREATE DATABASE "OWNK_BD"
    WITH 
    OWNER = ownk_us    
    ENCODING = 'UTF8'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
CREATE DATABASE
	
	
grant all privileges on database "OWNK_BD" TO ownk_us;
GRANT

--Se ajusta path para creacion en el schema
ALTER DATABASE "OWNK_BD" SET search_path TO ownk_schema,public;
ALTER DATABASE
SET search_path TO ownk_schema,public;
SET

	
-- Cambio de base de datos
\c "OWNK_BD" 
Ahora está conectado a la base de datos «OWNK_BD» con el usuario «postgres».



create extension pgcrypto;
CREATE EXTENSION
create extension "uuid-ossp";
CREATE EXTENSION
create extension pg_trgm;
CREATE EXTENSION

--
-- Name: ownk_ext; Type: SCHEMA; Schema: -; Owner: ownk_us
--

CREATE SCHEMA ownk_ext;
CREATE SCHEMA


ALTER SCHEMA ownk_ext OWNER TO ownk_us;
ALTER SCHEMA


CREATE SCHEMA ownk_schema;
CREATE SCHEMA

ALTER SCHEMA ownk_schema OWNER TO ownk_us;
ALTER SCHEMA





-- @INSTALL_OBJECTS.sql

\i INSTALL_OBJECTS.sql
-- INSTALL OBJECTS...

\i 01_SECUENCIAS/INSTALL_SECUENCIAS.sql
\i 01_SECUENCIAS/02_AUTENTICACION/INSTALL.sql
\i 01_SECUENCIAS/02_AUTENTICACION/AUT_SUSER.sql
CREATE SEQUENCE aut_suser;    
CREATE SEQUENCE
\i 02_TABLAS/INSTALL_TABLAS.sql
\i 02_TABLAS/02_AUTENTICACION/INSTALL.sql
\i 02_TABLAS/02_AUTENTICACION/AUT_TUSER.sql
CREATE TABLE AUT_TUSER
(

USER_USER				varchar (50) NOT NULL,
USER_NAME				varchar (100) NOT NULL,
USER_AGE				integer NOT NULL,
USER_POSITION			varchar (100) NOT NULL

)

WITH (
   OIDS = FALSE
)
TABLESPACE pg_default;
CREATE TABLE

ALTER TABLE ONLY AUT_TUSER ADD CONSTRAINT PK_AUT_USER
    PRIMARY KEY (USER_USER)
;
ALTER TABLE

COMMENT ON TABLE AUT_TUSER 
	IS 'Nombre de la tabla'
;
COMMENT

COMMENT ON COLUMN AUT_TUSER.USER_NAME
	IS 'Nombre del usuario'
;
COMMENT

COMMENT ON COLUMN AUT_TUSER.USER_AGE
	IS 'Edad del usuario'
;
COMMENT

COMMENT ON COLUMN AUT_TUSER.USER_POSITION
	IS 'Cargo del usuario'
;
COMMENT
\i 02_TABLAS/02_AUTENTICACION/AUT_TROL.sql
CREATE TABLE AUT_TROL
(

ROL_ROL				varchar (10) NOT NULL,
ROL_DESCRI			varchar (100) NOT NULL

)

WITH (
   OIDS = FALSE
)
TABLESPACE pg_default;
CREATE TABLE

ALTER TABLE ONLY AUT_TROL ADD CONSTRAINT PK_AUT_ROL
    PRIMARY KEY (ROL_ROL)
;
ALTER TABLE

COMMENT ON TABLE AUT_TROL 
	IS 'Nombre de la tabla'
;
COMMENT

COMMENT ON COLUMN AUT_TROL.ROL_ROL
	IS 'ID del rol'
;
COMMENT

COMMENT ON COLUMN AUT_TROL.ROL_DESCRI
	IS 'DescripciÃ³n del rol'
;
COMMENT
\i 02_TABLAS/02_AUTENTICACION/AUT_TUROL.sql
CREATE TABLE AUT_TUROL
(

UROL_USER			varchar (50) NOT NULL,
UROL_ROL			varchar (10) NOT NULL

)

WITH (
   OIDS = FALSE
)
TABLESPACE pg_default;
CREATE TABLE

COMMENT ON TABLE AUT_TUROL 
	IS 'Nombre de la tabla'
;
COMMENT

COMMENT ON COLUMN AUT_TUROL.UROL_USER
	IS 'ID del usuario'
;
COMMENT

COMMENT ON COLUMN AUT_TUROL.UROL_ROL
	IS 'ID del rol'
;
COMMENT
\i 03_FOREIGN_KEY/INSTALL_FOREIGN.sql
\i 03_FOREIGN_KEY/02_AUTENTICACION/INSTALL.sql
\i 03_FOREIGN_KEY/02_AUTENTICACION/AUT_TUROL_FK.sql
ALTER TABLE ONLY AUT_TUROL ADD CONSTRAINT FK_AUT_TUROL_AUT_TUSER
	FOREIGN KEY (UROL_USER) REFERENCES AUT_TUSER (USER_USER)
;
ALTER TABLE

ALTER TABLE ONLY AUT_TUROL ADD CONSTRAINT FK_AUT_TUROL_AUT_TROL
	FOREIGN KEY (UROL_ROL) REFERENCES AUT_TROL (ROL_ROL)
;
ALTER TABLE
\i 04_TIPOS/INSTALL_TIPOS.sql
\i 04_TIPOS/02_AUTENTICACION/INSTALL.sql
\i 05_FUNCIONES/INSTALL_FUNCIONES.sql
\i 05_FUNCIONES/02_AUTENTICACION/INSTALL.sql
\i 05_FUNCIONES/02_AUTENTICACION/aut_quser$createuser.sql
CREATE OR REPLACE FUNCTION  "aut_quser$createuser"
(

	p_name_user 	TEXT,
	p_age_user		numeric,
	p_position_user TEXT,
	p_rol 			TEXT,
	OUT p_answer 	TEXT
	
)

RETURNS TEXT
LANGUAGE 'plpgsql'
COST 100
VOLATILE 
AS $BODY$

DECLARE
	
	v_id_user varchar (50);
	v_id_user_temp numeric ;
	c_suser CURSOR FOR
	select nextval ('aut_suser');
	
BEGIN
	
	OPEN c_suser;
	FETCH c_suser INTO v_id_user_temp;
	CLOSE c_suser;
	
	v_id_user:= to_char(v_id_user_temp, '999');
	
	INSERT INTO AUT_TUSER (USER_USER, USER_NAME, USER_AGE, USER_POSITION) 
		VALUES (v_id_user,p_name_user,p_age_user, p_position_user)
	;
	
	INSERT INTO AUT_TUROL (UROL_USER, UROL_ROL) 
		VALUES (v_id_user, p_rol)
	;
	
	p_answer:='OK';
	
	EXCEPTION
	
	WHEN OTHERS THEN
	
	p_answer:='Error'||SQLERRM;
	
END;

$BODY$
CREATE FUNCTION
\i 05_FUNCIONES/02_AUTENTICACION/api_aut_quser$createuser.sql
CREATE OR REPLACE FUNCTION "api_aut_quser$createuser"
(
	p_name_user 	TEXT,
	p_age_user		numeric,
	p_position_user TEXT,
	p_rol 			TEXT,
	OUT p_answer 	TEXT 
    
)
RETURNS TEXT
LANGUAGE 'plpgsql'
COST 100
VOLATILE 
AS $BODY$

DECLARE

   
    -- =======================================
    -- Variables de control de transaccion
    -- =======================================
	
	
	
    -- Variables usadas para registro de info
    -- de la transaccion
    -- ---------------------------------------
    /*
    --Codigo interno de respuesta
	
   v_crta_crta_gral GE_TCRTA.CRTA_CRTA%TYPE;
   
   --Proceso al cual pertenece el codigo de respuesta
   v_crta_prcs_gral GE_TCRTA.CRTA_PRCS%TYPE;
  
  
    --Codigo Http para el cogido interno de respuesta 
    v_crta_http_gral GE_TCRTA.CRTA_HTTP_CODE%TYPE;
    
    --Descripcion general del codigo de respuesta 
    v_crta_descri_gral GE_TCRTA.CRTA_DESCRI%TYPE;
    
    --Log de trasnsacciones
    v_lgtr GE_TLGTR.LGTR_LGTR%TYPE;    
    
    ---Id Entidad para el log de transacciones 
    v_lgtr_id_entidad GE_TLGTR.LGTR_ID_ENTIDAD%TYPE;  
    
    */
    
    -- =======================================
    -- Transformaciones JSON Parametros Ctrl
    -- =======================================
    -- Se convierten los parametros TEXT json
    -- a objetos TYPE de base de datos
    -- ---------------------------------------
    /*
    
    -- Entrada
    -- parametros de control
    c_ctrl_operacion CURSOR (pc_variable TEXT) FOR
        SELECT * FROM json_populate_recordset
        (NULL ::TYPE_TO_GE_LGTR,
		(pc_variable)::json );
	
	tt_ctrl_operacion TYPE_TT_GE_LGTR;
    to_ctrl_operacion TYPE_TO_GE_LGTR;
    
    
    -- Salidas
    -- p_errores
    c_p_terrore CURSOR (pc_variable TEXT) FOR
    SELECT * FROM array_to_json
    (pc_variable::TYPE_TT_GE_ERRO);	
	
    -- p_mensajes
    c_p_tmensaj CURSOR (pc_variable TEXT) FOR
    SELECT * FROM array_to_json
    (pc_variable::TYPE_TT_GE_MNSJ);
    
    
    F$RESULT_CTRL RECORD;
    
    
    
    -- =======================================
    -- Variables de negocio 
    -- =======================================
    to_ge_erro TYPE_TO_GE_ERRO;
    tt_ge_erro TYPE_TT_GE_ERRO;
    -- =======================================
    -- Transformaciones JSON Para Negocio
    -- =======================================
    -- Se convierten los parametros TEXT json
    -- a objetos TYPE de base de datos
    -- ---------------------------------------
    
    
    -- parametros de entrada
    -- usuario
	c_tuser CURSOR (pc_variable TEXT)FOR
		SELECT *FROM json_populate_recordset
		(NULL ::TYPE_TO_AU_USER,
		(pc_variable)::json);
    
	tt_user TYPE_TT_AU_USER;
	to_user TYPE_TO_AU_USER; 
	
	c_tplayer CURSOR (pc_variable TEXT)FOR
		SELECT *FROM json_populate_recordset
		(NULL ::TYPE_TO_PL_PLAYER,
		(pc_variable)::json);
    
	to_pl_player TYPE_TO_PL_PLAYER;
    tt_pl_player TYPE_TT_PL_PLAYER; 
	
    */
    -- parametros de salida
   

    F$RESULT_LOGICA TEXT;

BEGIN

    --v_crta_prcs_gral := 'api_qregister.registerplayer';

    -- =======================================
    -- Validacion de control de operacion
    -- =======================================
    -- Se valida que los parametros de control
    -- de operacion sean validos
    -- ---------------------------------------
	/*    
    DECLARE

        v_cod_rspta_lgtr_v GE_TCRTA.CRTA_CRTA%TYPE;
        v_cod_rpta_descri_lgtr_v GE_TCRTA.CRTA_DESCRI%TYPE;
        
    BEGIN
    
        
        FOR i IN c_ctrl_operacion(p_ctrl_operacion)
        LOOP
           to_ctrl_operacion := ROW (i.LGTR_TRANS, i.LGTR_TERMINAL, i.LGTR_USER, i.LGTR_FECH_OPER, i.LGTR_HORA_OPER, 
i.LGTR_OBSERVACION)::TYPE_TO_GE_LGTR;
           tt_ctrl_operacion[COALESCE(array_length(tt_ctrl_operacion, 1), 0)] := to_ctrl_operacion;
        END LOOP;
    
        SELECT
            *
            FROM ge_qlgtr$validar_ctrl_operacion(tt_ctrl_operacion, v_crta_prcs_gral)
            INTO F$RESULT_CTRL;
        
        
        v_cod_rspta_lgtr_v       := F$RESULT_CTRL.P_COD_RPTA;
        v_cod_rpta_descri_lgtr_v := F$RESULT_CTRL.P_COD_RPTA_DESCRI;
        
		
        IF (v_cod_rspta_lgtr_v <> 'OK') THEN

			raise EXCEPTION  using errcode = 50001;

        END IF;

    END;
    */
    -- =======================================
    -- Inicio de log de transaccion 
    -- =======================================
    -- Se inicia log de transaccion para el
    -- proceso especificado
    -- ---------------------------------------
	/*
    DECLARE

        v_cod_rspta_lgtr GE_TCRTA.CRTA_CRTA%TYPE;
        v_cod_rpta_descri_lgtr GE_TCRTA.CRTA_DESCRI%TYPE;

    BEGIN
    
        raise notice 'inicio log';
        raise notice 'tt_ctrl_operacion: %',tt_ctrl_operacion;
        raise notice 'v_crta_prcs_gral: %',v_crta_prcs_gral;
        
        SELECT
            *
            FROM ge_qlgtr$iniciar_log(tt_ctrl_operacion,v_crta_prcs_gral)
            INTO v_cod_rspta_lgtr, v_cod_rpta_descri_lgtr, v_lgtr;
        
        raise notice 'fin del inicio log';
		
		if(v_cod_rspta_lgtr <> 'OK')then
		
			v_crta_crta_gral := v_cod_rspta_lgtr;
			
			raise EXCEPTION  using errcode = 50002;
			
		end if;

    END;
    */
    -- =======================================
    -- LLamado a servicio de negocio
    -- =======================================
    -- Se realiza el llamado a la(s) operacion
    -- de negocio correspondiente
    -- ---------------------------------------
	BEGIN
		SELECT
			*
			FROM aut_quser$createuser(p_name_user,p_age_user,p_position_user,p_rol)
			INTO F$RESULT_LOGICA;
			p_answer:= F$RESULT_LOGICA;
		
		/*
		IF (p_cod_rpta<> 'OK') THEN
        
            --Se convierte las salidas de control a JSON
            OPEN c_p_terrore (F$RESULT_LOGICA.P_ERRORES);
            FETCH c_p_terrore INTO p_errores;
            CLOSE c_p_terrore;
            
            OPEN c_p_tmensaj (F$RESULT_LOGICA.P_MENSAJES);
            FETCH c_p_tmensaj INTO p_mensajes;
            CLOSE c_p_tmensaj;
		END IF;
		
		
		v_lgtr_id_entidad:=v_user_user;
		
		IF (p_cod_rpta <> 'OK') THEN
		
			raise EXCEPTION  using errcode = 50003;	
			
		end if;
		*/
		
	EXCEPTION
		when others then
			p_answer:= 'ERROR_LOGIC_NC';
		
    END;
    
    
    -- =======================================
    -- Finalizacion de log de transaccion 
    -- =======================================
    -- Se finaliza log de transaccion para el
    -- proceso especificado
    -- ---------------------------------------
    /*
	DECLARE

        v_cod_rspta_lgtr GE_TCRTA.CRTA_CRTA%TYPE;
        v_cod_rpta_descri_lgtr GE_TCRTA.CRTA_DESCRI%TYPE;

    BEGIN

        IF (p_cod_rpta = 'OK') THEN

            v_crta_crta_gral := 'OK';

        ELSE

            v_crta_crta_gral := p_cod_rpta;

        END IF;

        SELECT
            *
            FROM ge_qlgtr$finalizar_log(p_lgtr := v_lgtr, p_crta := v_crta_crta_gral, p_id_entidad := COALESCE(v_lgtr_id_entidad, '-'), p_error := 
v_crta_descri_gral)
            INTO v_cod_rspta_lgtr, v_cod_rpta_descri_lgtr;
	EXCEPTION 
		WHEN OTHERS THEN
			INSERT INTO GE_TLOGT
				(logt_logt,logt_valor)VALUES(50,'asd');
	END;*/

EXCEPTION
	WHEN others THEN

        p_answer:= 'ERROR_NC';
	
END;

$BODY$;
CREATE FUNCTION

--ALTER FUNCTION "api_qregister$registerplayer"(text, text, text, text, text, text)
    
\i 06_DATOS/INSTALL_DATOS.sql
\i 06_DATOS/02_AUTENTICACION/INSTALL.sql
\i 06_DATOS/02_AUTENTICACION/01_IS_AUT_TUSER.sql
INSERT INTO AUT_TUSER (USER_USER, USER_NAME, USER_AGE, USER_POSITION) 
	VALUES ('1','Antonio', 30, 'Contador')
;
INSERT 0 1
\i 06_DATOS/02_AUTENTICACION/02_IS_AUT_TROL.sql
INSERT INTO AUT_TROL (ROL_ROL, ROL_DESCRI) 
	VALUES ('ADMIN','Administrador')
;
INSERT 0 1
\i 06_DATOS/02_AUTENTICACION/03_IS_AUT_TUROL.sql
INSERT INTO AUT_TUROL (UROL_USER, UROL_ROL) 
	VALUES ('1','ADMIN')
;
INSERT 0 1


-- @INSTALL_PRIVILEGES.sql
\i INSTALL_PRIVILEGES.sql
grant all privileges on all tables in schema ownk_schema to ownk_us;
GRANT
grant all privileges on all sequences in schema ownk_schema to ownk_us;
GRANT
grant all privileges on all functions in schema ownk_schema to ownk_us; 
GRANT

ALTER ROLE ownk_us SUPERUSER;	
ALTER ROLE





-- Si la ejecuciÃ³n del script no presenta ningÃºn problema por favor haga 
-- COMMIT, de lo contrario haga ROLLBACK y comuniquese con OWNK S.A.S.
--
-- ********************  NOTA IMPORTANTE!!!!  ***********************
-- *                                                                *
-- *  POR FAVOR ENVIAR EL LOG DE EJECUCION DE ESTE SCRIPT (*.LST)   *
-- *  PARA EFECTOS DE VERIFICACION DEL CAMBIO                       *
-- *  AL CORREO proyectos@OWNK.CO                                   *
-- *                                                                *
-- *                        OWNK S.A.S                              *
-- *                                                                *
-- ******************************************************************
